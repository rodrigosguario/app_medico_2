// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables with fallback to hardcoded values for development
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://kmwsoppkrjzjioeadtqb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imttd3NvcHBrcmp6amlvZWFkdHFiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3ODkzNzYsImV4cCI6MjA3MzM2NTM3Nn0.RsQd3r30Ezfi5x_Di2eLgkqm5SCDC9tlOIXIDRJcYMY";

console.log('üîß Inicializando cliente Supabase:', {
  url: SUPABASE_URL,
  keyLength: SUPABASE_PUBLISHABLE_KEY?.length,
  hasKey: !!SUPABASE_PUBLISHABLE_KEY,
  usingEnvVars: {
    url: !!import.meta.env.VITE_SUPABASE_URL,
    key: !!import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY
  }
});

// Validate required configuration
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('‚ùå Configura√ß√£o do Supabase incompleta:', {
    hasUrl: !!SUPABASE_URL,
    hasKey: !!SUPABASE_PUBLISHABLE_KEY
  });
  throw new Error('Configura√ß√£o do Supabase incompleta. Verifique as vari√°veis de ambiente.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web'
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced connection test with better error handling
const testConnection = async () => {
  try {
    console.log('üîç Testando conectividade com Supabase...');
    
    // Test basic connectivity
    const { data, error, count } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true });
    
    if (error) {
      console.error('‚ùå Erro de conectividade Supabase:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      
      // Provide specific guidance based on error type
      if (error.message.includes('JWT')) {
        console.error('üîë Problema com autentica√ß√£o JWT. Verifique as chaves do Supabase.');
      } else if (error.message.includes('CORS')) {
        console.error('üåê Problema de CORS. Verifique as configura√ß√µes de dom√≠nio no Supabase.');
      } else if (error.message.includes('permission')) {
        console.error('üîí Problema de permiss√µes RLS. Verifique as pol√≠ticas de seguran√ßa.');
      }
    } else {
      console.log('‚úÖ Supabase conectado com sucesso!', { 
        profilesCount: count,
        timestamp: new Date().toISOString()
      });
    }
  } catch (err) {
    console.error('üí• Erro inesperado ao testar conex√£o:', err);
  }
};

// Test connection on initialization
testConnection();

// Export connection test function for manual testing
export { testConnection };
