import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthGuard';
import { useToast } from '@/hooks/use-toast';
import { 
  Bot, 
  Send, 
  User, 
  Loader2, 
  Brain, 
  Calendar,
  TrendingUp,
  FileText,
  Clock,
  DollarSign,
  Minimize2,
  Maximize2
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
}

interface AIAssistantProps {
  className?: string;
  minimized?: boolean;
  onMinimizeToggle?: (minimized: boolean) => void;
}

const suggestedQuestions = [
  {
    icon: Calendar,
    text: "Como est√° minha agenda esta semana?",
    category: "Agenda"
  },
  {
    icon: TrendingUp,
    text: "Analise minha carga hor√°ria atual",
    category: "An√°lise"
  },
  {
    icon: FileText,
    text: "Crie um resumo dos meus plant√µes do m√™s",
    category: "Relat√≥rios"
  },
  {
    icon: Clock,
    text: "Sugira otimiza√ß√µes na minha agenda",
    category: "Otimiza√ß√£o"
  },
  {
    icon: DollarSign,
    text: "Resumo da situa√ß√£o financeira",
    category: "Financeiro"
  }
];

export const AIAssistant: React.FC<AIAssistantProps> = ({ 
  className, 
  minimized = false, 
  onMinimizeToggle 
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isFirstLoad, setIsFirstLoad] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { user } = useAuth();
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isFirstLoad && !minimized) {
      setMessages([{
        id: '1',
        content: `Ol√°! üëã Sou seu assistente de IA especializado em gest√£o m√©dica. Tenho acesso aos seus dados e posso ajudar voc√™ com:

ü§ñ **An√°lise inteligente** - Processamento dos seus dados com IA real
üóìÔ∏è **Gest√£o de agenda** - An√°lise de compromissos e otimiza√ß√£o de hor√°rios  
üìä **Insights personalizados** - Relat√≥rios baseados na sua atividade
üí∞ **Controle financeiro** - An√°lise de receitas e despesas
üìà **Otimiza√ß√£o** - Sugest√µes para melhorar sua produtividade
üè• **Gest√£o de plant√µes** - Distribui√ß√£o e organiza√ß√£o de carga hor√°ria

Posso analisar seus dados reais e fornecer insights espec√≠ficos para o seu perfil m√©dico. Como posso ajudar voc√™ hoje?`,
        sender: 'assistant',
        timestamp: new Date()
      }]);
      setIsFirstLoad(false);
    }
  }, [minimized, isFirstLoad]);

  const sendMessage = async (messageText: string) => {
    if (!messageText.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: messageText,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // Get user profile and recent data for context
      const userProfile = user ? {
        name: user.user_metadata?.name || 'Usu√°rio',
        specialty: user.user_metadata?.specialty || 'M√©dico',
        crm: user.user_metadata?.crm || 'N/A'
      } : null;

      // Call AI assistant edge function
      const response = await supabase.functions.invoke('ai-assistant', {
        body: {
          message: messageText,
          userId: user?.id,
          includeData: true
        }
      });

      if (response.error) {
        throw new Error(response.error.message || 'Erro na edge function');
      }

      const data = response.data;
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: data.response || data.fallbackText || "Desculpe, n√£o consegui processar sua solicita√ß√£o.",
        sender: 'assistant',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
      
      // Fallback to rule-based response
      const fallbackResponse = generateSimpleResponse(messageText);
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: fallbackResponse,
        sender: 'assistant',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
      
      toast({
        title: "Modo Offline",
        description: "Usando respostas b√°sicas. Verifique sua conex√£o para funcionalidade completa.",
        variant: "default",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const generateSimpleResponse = (question: string): string => {
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('agenda') || lowerQuestion.includes('compromisso')) {
      return `üìÖ **An√°lise da Agenda**

Com base nos dados dispon√≠veis, posso ver que:
‚Ä¢ Voc√™ pode visualizar e gerenciar seus eventos no calend√°rio
‚Ä¢ Use as visualiza√ß√µes de M√™s, Semana ou Dia para melhor organiza√ß√£o
‚Ä¢ Clique em qualquer dia para adicionar novos compromissos

**Dica:** Para uma vis√£o completa da semana, use a visualiza√ß√£o semanal no calend√°rio.`;
    }
    
    if (lowerQuestion.includes('financeiro') || lowerQuestion.includes('dinheiro') || lowerQuestion.includes('receita')) {
      return `üí∞ **Situa√ß√£o Financeira**

Para an√°lise completa da sua situa√ß√£o financeira:
‚Ä¢ Acesse a p√°gina "Financeiro" no menu
‚Ä¢ Adicione suas transa√ß√µes usando "Nova Transa√ß√£o"
‚Ä¢ Monitore receitas e despesas por categoria
‚Ä¢ Acompanhe impostos projetados

**Dica:** Mantenha sempre suas transa√ß√µes atualizadas para insights precisos.`;
    }
    
    if (lowerQuestion.includes('plant√£o') || lowerQuestion.includes('plantons')) {
      return `üè• **Gerenciamento de Plant√µes**

Para otimizar seus plant√µes:
‚Ä¢ Cadastre todos os plant√µes no calend√°rio
‚Ä¢ Use diferentes cores para cada tipo de evento
‚Ä¢ Configure lembretes para n√£o perder compromissos
‚Ä¢ Acompanhe a carga hor√°ria na dashboard

**Dica:** Utilize os templates r√°pidos para criar plant√µes recorrentes.`;
    }
    
    if (lowerQuestion.includes('relat√≥rio') || lowerQuestion.includes('resumo')) {
      return `üìä **Relat√≥rios e Resumos**

Voc√™ pode gerar relat√≥rios atrav√©s de:
‚Ä¢ Dashboard principal - vis√£o geral das m√©tricas
‚Ä¢ P√°gina financeira - an√°lise de receitas e despesas  
‚Ä¢ Calend√°rio - exporta√ß√£o de eventos (.ICS)
‚Ä¢ Filtros por per√≠odo para an√°lises espec√≠ficas

**Dica:** Use a exporta√ß√£o para backup dos seus dados.`;
    }
    
    if (lowerQuestion.includes('otimiz') || lowerQuestion.includes('melhora')) {
      return `‚ö° **Otimiza√ß√£o da Agenda**

Sugest√µes para melhorar sua produtividade:
‚Ä¢ Agrupe consultas por local/hospital
‚Ä¢ Deixe intervalos entre plant√µes longos
‚Ä¢ Use a visualiza√ß√£o semanal para planejar
‚Ä¢ Configure notifica√ß√µes para lembretes

**Dica:** Revise sua agenda semanalmente para ajustes.`;
    }
    
    if (lowerQuestion.includes('ajuda') || lowerQuestion.includes('como')) {
      return `ü§ù **Como Posso Ajudar**

Posso auxiliar com:
‚Ä¢ **Agenda:** An√°lise de compromissos e otimiza√ß√£o de hor√°rios
‚Ä¢ **Financeiro:** Controle de receitas, despesas e impostos
‚Ä¢ **Plant√µes:** Organiza√ß√£o e distribui√ß√£o de carga hor√°ria
‚Ä¢ **Relat√≥rios:** Resumos e insights sobre sua atividade
‚Ä¢ **Configura√ß√µes:** Ajuda com perfil e prefer√™ncias

Digite sua d√∫vida espec√≠fica ou use as perguntas sugeridas!`;
    }
    
    // Default response
    return `ü§ñ **Assistente Virtual**

Obrigado pela sua pergunta! Estou aqui para ajudar com:

‚Ä¢ **Gest√£o de agenda** e compromissos
‚Ä¢ **Controle financeiro** e an√°lise de receitas
‚Ä¢ **Organiza√ß√£o de plant√µes** e carga hor√°ria
‚Ä¢ **Relat√≥rios** e insights personalizados

Tente perguntas mais espec√≠ficas como:
- "Como est√° minha agenda esta semana?"
- "Resumo da situa√ß√£o financeira"
- "Analise minha carga hor√°ria"

**Dica:** Use as perguntas sugeridas para come√ßar!`;
  };

  const handleSuggestedQuestion = (question: string) => {
    sendMessage(question);
  };

  if (minimized) {
    return (
      <div className={cn("fixed bottom-4 right-4 z-50", className)}>
        <Button
          onClick={() => onMinimizeToggle?.(false)}
          className="rounded-full h-14 w-14 shadow-lg bg-medical hover:bg-medical-dark"
        >
          <Bot className="h-6 w-6 text-white" />
        </Button>
      </div>
    );
  }

  return (
    <Card className={cn("flex flex-col h-full", className)}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="p-2 bg-medical/10 rounded-lg">
              <Brain className="h-5 w-5 text-medical" />
            </div>
            <div>
              <CardTitle className="text-lg">Assistente Virtual</CardTitle>
              <p className="text-sm text-muted-foreground">IA especializada em gest√£o m√©dica</p>
            </div>
          </div>
          {onMinimizeToggle && (
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => onMinimizeToggle(true)}
            >
              <Minimize2 className="h-4 w-4" />
            </Button>
          )}
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col gap-4 p-0">
        <ScrollArea className="flex-1 px-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  "flex gap-3 max-w-full",
                  message.sender === 'user' ? 'justify-end' : 'justify-start'
                )}
              >
                {message.sender === 'assistant' && (
                  <div className="flex-shrink-0 w-8 h-8 bg-medical/10 rounded-full flex items-center justify-center">
                    <Bot className="h-4 w-4 text-medical" />
                  </div>
                )}
                
                <div
                  className={cn(
                    "rounded-lg px-3 py-2 max-w-[80%] break-words",
                    message.sender === 'user'
                      ? 'bg-medical text-white'
                      : 'bg-muted text-foreground'
                  )}
                >
                  <div className="whitespace-pre-wrap text-sm">
                    {message.content}
                  </div>
                  <div className={cn(
                    "text-xs mt-1 opacity-70",
                    message.sender === 'user' ? 'text-white' : 'text-muted-foreground'
                  )}>
                    {message.timestamp.toLocaleTimeString('pt-BR', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                </div>

                {message.sender === 'user' && (
                  <div className="flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                    <User className="h-4 w-4 text-primary" />
                  </div>
                )}
              </div>
            ))}

            {isLoading && (
              <div className="flex gap-3 justify-start">
                <div className="flex-shrink-0 w-8 h-8 bg-medical/10 rounded-full flex items-center justify-center">
                  <Loader2 className="h-4 w-4 text-medical animate-spin" />
                </div>
                <div className="bg-muted rounded-lg px-3 py-2">
                  <div className="text-sm text-muted-foreground">
                    Processando sua solicita√ß√£o...
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>

        {messages.length === 1 && (
          <div className="px-4">
            <Separator className="mb-4" />
            <div className="space-y-3">
              <p className="text-sm font-medium text-muted-foreground">Perguntas sugeridas:</p>
              <div className="grid gap-2">
                {suggestedQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    className="justify-start h-auto p-3 text-left"
                    onClick={() => handleSuggestedQuestion(question.text)}
                  >
                    <question.icon className="h-4 w-4 mr-2 flex-shrink-0" />
                    <div className="flex-1">
                      <div className="text-sm">{question.text}</div>
                      <Badge variant="secondary" className="text-xs mt-1">
                        {question.category}
                      </Badge>
                    </div>
                  </Button>
                ))}
              </div>
            </div>
          </div>
        )}

        <div className="p-4 border-t">
          <div className="flex gap-2">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              placeholder="Pergunte sobre seus plant√µes, consultas ou finan√ßas..."
              onKeyPress={(e) => e.key === 'Enter' && sendMessage(inputMessage)}
              disabled={isLoading}
              className="flex-1"
            />
            <Button
              onClick={() => sendMessage(inputMessage)}
              disabled={!inputMessage.trim() || isLoading}
              className="bg-medical hover:bg-medical-dark"
            >
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};